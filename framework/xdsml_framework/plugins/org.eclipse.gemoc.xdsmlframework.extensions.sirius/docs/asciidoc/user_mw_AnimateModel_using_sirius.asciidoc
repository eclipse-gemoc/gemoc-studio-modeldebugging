////////////////////////////////////////////////////////////////
//	Reproduce title only if not included in master documentation
////////////////////////////////////////////////////////////////
ifndef::includedInMaster[]
= GEMOC Modeling workbench User guide

== Execute, animate and debug models

=== Animate a model

endif::[]


[[mw-animate-model-using-sirius-section]]
==== Animate a model using representation provided by Sirius
footnote:[asciidoc source of this page:  https://github.com/eclipse/gemoc-studio-modeldebugging/tree/master/framework/xdsml_framework/plugins/org.eclipse.gemoc.xdsmlframework.extensions.sirius/docs/asciidoc/user_mw_AnimateModel_using_sirius.asciidoc.]

If the language provides some animation provided by Sirius (see <<define-sirus-animation-representation-section>>),
then the activation is done via the enabling of dedicated layers.

[NOTE]
====
If the animation service class has been properly configured, then the declared layers will be enabled 
by default when starting a model execution.  

Otherwise, the user may have to enable the layers manually.
====

Manual enabling/disabling of a layer is usually done by selecting the background of the diagram and then click in the layer
drop down command as shown in <<img-manual_enabling_of_sirius_layer>>.

[[img-manual_enabling_of_sirius_layer]]
.Manual activation/deactivation of a Sirius animation layer 
image::images/workbench/modeling/manual_enabling_of_sirius_layer.png["Manual activation/deactivation of a Sirius animation layer"]

When running, a typical animated visualization of the execution data could be as in 
<<img_fsm-simple-sirius-animation>>. In this FSM language, 
the current state is decorated with a green arrow and a new box shows the buffer content
 as defined by the language designer in <<defining-a-debug-representation-section>>.

[[img_fsm-simple-sirius-animation]]
.Example of Sirius animation on a FSM DSL.
image::images/workbench/modeling/execution_data_animation.png[Example of Sirius animation on a FSM DSL]

===== Sirius animation performance

By default the Sirius animation  will refresh on every engine notification and will wait for the end of the refresh before processing the next steps.
While providing precise display, on complex diagram (for example with many queries or several views) this can significantly slow down the model execution speed.

In order to speed up the model execution, GEMOC provides several Sirius animation strategies:

* *All notifications*: processes all engine diagram refresh notifications. The refresh command is blocking, the model execution is stopped until the refresh is done (slowest) 
* *Best effort*: the refresh is done in a separate job. It uses a single job queue with a discard oldest policy (i.e. the execution continue during the refresh of the diagrams, 
intermediate notifications may be discarded if the previous refresh hasn't finished)
* *Max frequency limit*: use an additional timer in order to guarantee to not call refresh more than the given frequency (default to 500ms)
* *Engine pause*: the refresh occurs only on the debugger commands (ie. pause / resume / step into / step over ...)
* *Manual*: no automatic refresh, the user has to click on the diagram button to refresh the diagrams (available when selecting the page background in Sirius editors)

These strategies are set in the _Preferences_ -> _Run/Debug_ -> _GEMOC Sirius Animation_ (see <<img_sirius-animation-preference-page>>)
 
[[img_sirius-animation-preference-page]]
.GEMOC Sirius animation preference page.
image::images/workbench/modeling/sirius_animation_preference_page.png[GEMOC Sirius animation preference page]
  
