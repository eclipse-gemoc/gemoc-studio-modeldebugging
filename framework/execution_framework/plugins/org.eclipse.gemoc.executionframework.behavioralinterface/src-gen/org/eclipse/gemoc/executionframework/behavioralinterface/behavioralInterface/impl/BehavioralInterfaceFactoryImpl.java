/**
 * generated by Xtext 2.24.0
 */
package org.eclipse.gemoc.executionframework.behavioralinterface.behavioralInterface.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.gemoc.executionframework.behavioralinterface.behavioralInterface.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BehavioralInterfaceFactoryImpl extends EFactoryImpl implements BehavioralInterfaceFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BehavioralInterfaceFactory init()
  {
    try
    {
      BehavioralInterfaceFactory theBehavioralInterfaceFactory = (BehavioralInterfaceFactory)EPackage.Registry.INSTANCE.getEFactory(BehavioralInterfacePackage.eNS_URI);
      if (theBehavioralInterfaceFactory != null)
      {
        return theBehavioralInterfaceFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BehavioralInterfaceFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehavioralInterfaceFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BehavioralInterfacePackage.BEHAVIORAL_INTERFACE: return createBehavioralInterface();
      case BehavioralInterfacePackage.EVENT: return createEvent();
      case BehavioralInterfacePackage.EVENT_PARAMETER: return createEventParameter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BehavioralInterfacePackage.EVENT_TYPE:
        return createEventTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BehavioralInterfacePackage.EVENT_TYPE:
        return convertEventTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehavioralInterface createBehavioralInterface()
  {
    BehavioralInterfaceImpl behavioralInterface = new BehavioralInterfaceImpl();
    return behavioralInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventParameter createEventParameter()
  {
    EventParameterImpl eventParameter = new EventParameterImpl();
    return eventParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType createEventTypeFromString(EDataType eDataType, String initialValue)
  {
    EventType result = EventType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehavioralInterfacePackage getBehavioralInterfacePackage()
  {
    return (BehavioralInterfacePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BehavioralInterfacePackage getPackage()
  {
    return BehavioralInterfacePackage.eINSTANCE;
  }

} //BehavioralInterfaceFactoryImpl
