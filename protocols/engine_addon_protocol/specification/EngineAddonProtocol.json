{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"title": "GEMOC Engine Addon Protocol",
	"description": "GEMOC Engine Addon Protocol defines the protocol used to receive engine notification as defined by the IEngineAddon",
	"type": "object",


	"definitions": {

		"ProtocolMessage": {
			"type": "object",
			"title": "Base Protocol",
			"description": "Base class of requests, responses, and events.",
			"properties": {
				"seq": {
					"type": "integer",
					"description": "Sequence number (also known as message ID). For protocol messages of type 'request' this ID can be used to cancel the request."
				},
				"type": {
					"type": "string",
					"description": "Message type.",
					"_enum": [ "request", "response", "event" ]
				}
			},
			"required": [ "seq", "type" ]
		},

		"Request": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "A client or debug adapter initiated request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "request" ]
					},
					"command": {
						"type": "string",
						"description": "The command to execute."
					},
					"arguments": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Object containing arguments for the command."
					}
				},
				"required": [ "type", "command" ]
			}]
		},

		"Event": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "A debug adapter initiated event.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "event" ]
					},
					"event": {
						"type": "string",
						"description": "Type of event."
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Event-specific information."
					}
				},
				"required": [ "type", "event" ]
			}]
		},

		"Response": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "Response for a request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "response" ]
					},
					"request_seq": {
						"type": "integer",
						"description": "Sequence number of the corresponding request."
					},
					"success": {
						"type": "boolean",
						"description": "Outcome of the request.\nIf true, the request was successful and the 'body' attribute may contain the result of the request.\nIf the value is false, the attribute 'message' contains the error in short form and the 'body' may contain additional information (see 'ErrorResponse.body.error')."
					},
					"command": {
						"type": "string",
						"description": "The command requested."
					},
					"message": {
						"type": "string",
						"description": "Contains the raw error in short form if 'success' is false.\nThis raw error might be interpreted by the frontend and is not shown in the UI.\nSome predefined values exist.",
						"_enum": [ "cancelled" ],
						"enumDescriptions": [
							"request was cancelled."
						]
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Contains request result if success is true and optional error details if success is false."
					}
				},
				"required": [ "type", "request_seq", "success", "command" ]
			}]
		},

		"ErrorResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "On error (whenever 'success' is false), the body can provide more details.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"error": {
								"$ref": "#/definitions/Message",
								"description": "An optional, structured error message."
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},
		"EngineAboutToStartEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine is about to start",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineAboutToStart" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine that is will start"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"EngineStartedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine is about to start",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineStarted" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the started engine"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"EngineInitializedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine has beed initialized",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineInitialized" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the initialized engine"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"EngineAboutToStopEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine is about to stop",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineAboutToStop" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"EngineStoppedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine stopped",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineStopped" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"EngineAboutToDisposeEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine is about to dispose",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineAboutToDispose" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine"
							}
						},
						"required": [ "engine" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"AboutToExecuteStepEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that some step is about to execute",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "aboutToExecuteStep" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine"
							},
							"stepToExecute": {
								"$ref": "#/definitions/Step",
								"description": "step that is about to execute"
							}
						},
						"required": [ "stateListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"StepExecutedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that a step has been executed",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "stepExecuted" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"engine": {
								"$ref": "#/definitions/ExecutionEngine",
								"description": "The name of the engine"
							},
							"stepToExecute": {
								"$ref": "#/definitions/Step",
								"description": "step executed"
							}
						},
						"required": [ "stateListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"GetStateRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "getState" ]
					},
					"arguments": {
						"$ref": "#/definitions/GetStateArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"GetStateArguments": {
			"type": "object",
			"description": "Arguments for 'getState' request.",
			"properties": {
				"stateId": {
					"type": "string",
					"description": "ID or URI of the State"
				}
			},
			"required": [ "stateId" ]
		},
		"GetStateResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'getState' request. ",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"state": {
								"$ref": "#/definitions/State",
								"description": ""
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},
		"GetStepRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "getStep" ]
					},
					"arguments": {
						"$ref": "#/definitions/GetStepArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"GetStepArguments": {
			"type": "object",
			"description": "Arguments for 'getStep' request.",
			"properties": {
				"stateId": {
					"type": "string",
					"description": "ID or URI of the Step"
				}
			},
			"required": [ "stateId" ]
		},
		"GetStepResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'getStep' request. ",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"state": {
								"$ref": "#/definitions/Step",
								"description": ""
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},
		"ExecutionEngine": {
			"type": "object",
			"title": "Types",
			"description": "Information about the Execution Engine.",
			"properties": {
				"engineKindName": {
					"type": "string",
					"description": "The engine kind name."
				},
				"engineName": {
					"type": "string",
					"description": "The engine name."
				}
			}
		},
		"Step": {
			"type": "object",
			"title": "Types",
			"description": "Information about a Step.",
			"properties": {
				"mseOccurence": {
					"$ref": "#/definitions/MSEOccurence",
					"description": ""
				},
				"startingStateID": {
					"type": "string",
					"description": "ID (typically an URI) of the starting RTD state (ie. before this step)"
				},
				"endingStateID": {
					"type": "string",
					"description": "ID (typically an URI) of the ending RTD state (ie. after this step)"
				}
			}
		},
		"MSEOccurence": {
			"type": "object",
			"title": "Types",
			"description": "Information about a MSEOccurence.",
			"properties": {
				"mse": {
					"$ref": "#/definitions/MSE",
					"description": ""
				},
				"parameters": {
					"type": "string",
					"description": "TODO !"
				},
				"result": {
					"type": "string",
					"description": "TODO !"
				}
				
			}
		},
		"MSE": {
			"type": "object",
			"title": "Types",
			"description": "Information about a MSE.",
			"properties": {
				"callerEObjectURI": {
					"type": "string",
					"description": "URI of the caller EObject in the model"
				},
				"actionID": {
					"type": "string",
					"description": "ID of the action applied to the EObject. Typically the URI of the EOperation."
				}
			}
		},
		"State": {
			"type": "object",
			"title": "Types",
			"description": "Information about a State. NOTE: version working as diff between previous steps (StartedStep) / next steps (EndedSteps)",
			"properties": {
				"changedValues": {
					"type": "array",
					"description": "",
					"items": {
						"$ref": "#/definitions/StateValue"
					}
				},
				"startedStepsID": {
					"type": "array",
					"description": "List of ID (or URI) of the steps that have this state as StartingState",
					"items": {
						"type": "string"
					}
				},
				"endedStepsID": {
					"type": "array",
					"description": "List of ID (or URI) of the steps that have this state as EndingState",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"StateValue": {
			"type": "object",
			"title": "Types",
			"description": "Information about a StateValue.",
			"properties": {
			}
		},
		"Message": {
			"type": "object",
			"description": "A structured message object. Used to return errors from requests.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for the message."
				},
				"format": {
					"type": "string",
					"description": "A format string for the message. Embedded variables have the form '{name}'.\nIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes."
				},
				"variables": {
					"type": "object",
					"description": "An object used as a dictionary for looking up the variables in the format string.",
					"additionalProperties": {
						"type": "string",
						"description": "Values must be strings."
					}
				},
				"sendTelemetry": {
					"type": "boolean",
					"description": "If true send to telemetry."
				},
				"showUser": {
					"type": "boolean",
					"description": "If true show user."
				},
				"url": {
					"type": "string",
					"description": "An optional url where additional information about this message can be found."
				},
				"urlLabel": {
					"type": "string",
					"description": "An optional label that is presented to the user as the UI for opening the url."
				}
			},
			"required": [ "id", "format" ]
		}

	}
}
