{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"title": "GEMOC Engine Addon Protocol",
	"description": "GEMOC Engine Addon Protocol defines the protocol used to receive engine notification as defined by the IEngineAddon",
	"type": "object",


	"definitions": {

		"ProtocolMessage": {
			"type": "object",
			"title": "Base Protocol",
			"description": "Base class of requests, responses, and events.",
			"properties": {
				"seq": {
					"type": "integer",
					"description": "Sequence number (also known as message ID). For protocol messages of type 'request' this ID can be used to cancel the request."
				},
				"type": {
					"type": "string",
					"description": "Message type.",
					"_enum": [ "request", "response", "event" ]
				}
			},
			"required": [ "seq", "type" ]
		},

		"Request": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "A client or debug adapter initiated request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "request" ]
					},
					"command": {
						"type": "string",
						"description": "The command to execute."
					},
					"arguments": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Object containing arguments for the command."
					}
				},
				"required": [ "type", "command" ]
			}]
		},

		"Event": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "A debug adapter initiated event.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "event" ]
					},
					"event": {
						"type": "string",
						"description": "Type of event."
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Event-specific information."
					}
				},
				"required": [ "type", "event" ]
			}]
		},

		"Response": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "Response for a request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "response" ]
					},
					"request_seq": {
						"type": "integer",
						"description": "Sequence number of the corresponding request."
					},
					"success": {
						"type": "boolean",
						"description": "Outcome of the request.\nIf true, the request was successful and the 'body' attribute may contain the result of the request.\nIf the value is false, the attribute 'message' contains the error in short form and the 'body' may contain additional information (see 'ErrorResponse.body.error')."
					},
					"command": {
						"type": "string",
						"description": "The command requested."
					},
					"message": {
						"type": "string",
						"description": "Contains the raw error in short form if 'success' is false.\nThis raw error might be interpreted by the frontend and is not shown in the UI.\nSome predefined values exist.",
						"_enum": [ "cancelled" ],
						"enumDescriptions": [
							"request was cancelled."
						]
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Contains request result if success is true and optional error details if success is false."
					}
				},
				"required": [ "type", "request_seq", "success", "command" ]
			}]
		},

		"ErrorResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "On error (whenever 'success' is false), the body can provide more details.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"error": {
								"$ref": "#/definitions/Message",
								"description": "An optional, structured error message."
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},
		"EngineAboutToStartEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that an engine is about to start",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "engineAboutToStart" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"stateListAsEMFJSON": {
								"type": "string",
								"description": "The list of started states (EMF EObjects) serialized using EMFJSON"
							}
						},
						"required": [ "stateListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"StepsStartedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that some states have started",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "stepsStarted" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"stateListAsEMFJSON": {
								"type": "string",
								"description": "The list of started states (EMF EObjects) serialized using EMFJSON"
							}
						},
						"required": [ "stateListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"StepsEndedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that some states have ended",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "stepsEnded" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"stateListAsEMFJSON": {
								"type": "string",
								"description": "The list of ended states (EMF EObjects) serialized using EMFJSON"
							}
						},
						"required": [ "stateListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"ValuesAddedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that values have been added",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "valuesAdded" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"valueListAsEMFJSON": {
								"type": "string",
								"description": "The list of added values (EMF EObjects) serialized using EMFJSON"
							}
						},
						"required": [ "valueListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"DimensionsAddedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "The event indicates that dimensions have been added",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "dimensionsAdded" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"dimensionListAsEMFJSON": {
								"type": "string",
								"description": "The list of added dimensions (EMF EObjects) serialized using EMFJSON"
							}
						},
						"required": [ "dimensionListAsEMFJSON" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},
		"InitializeTraceRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"title": "Requests",
				"description": "The 'initializeTrace' request is sent as the first request from the client to the model execution trace\nUntil the Model Execution Trace has responded to with an 'initializeTrace' response, the client must not send any additional requests or events to the Model Execution Trace.\nIn addition the Model Execution Trace is not allowed to send any requests or events to the client until it has responded with an 'initializeTrace' response.\nThe 'initializeTrace' request may only be sent once.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "initializeTrace" ]
					}
				},
				"required": [ "command"]
			}]
		},
		"InitializeTraceResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'initializeTrace' request.",
				"properties": {
					"body": {
						"$ref": "#/definitions/TraceCapabilities",
						"description": "The capabilities of this Model Execution Trace."
					}
				}
			}]
		},
		"GetFullTraceRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"title": "Requests",
				"description": "The 'getFullTrace' request is sent to ask for the EMF resource containing the trace",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "getFullTrace" ]
					},
					"arguments": {
						"$ref": "#/definitions/GetFullTraceRequestArguments"
					}
				},
				"required": [ "command"]
			}]
		},
		"GetFullTraceRequestArguments": {
			"type": "object",
			"description": "Arguments for 'getFullTrace' request.",
			"properties": {
				"serializationFormat": {
					"type": "string",
					"description": "The serialization format of the resource",
					"_enum": [ "json", "xmi" ]
				}
			}
		},
		"GetFullTraceResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'getFullTrace' request.",
				"properties": {
					"body": {
						"type": "string",
						"description": "the Trace EMF model in the desired textual format"
					}
				}
			}]
		},
		"TraceCapabilities": {
			"type": "object",
			"title": "Types",
			"description": "Information about the capabilities of a Model Execution trace.",
			"properties": {
				"supportsXXXRequest": {
					"type": "boolean",
					"description": "The model execution trace supports the 'XXX' request."
				}
			}
		},
		"ExecutionEngine": {
			"type": "object",
			"title": "Types",
			"description": "Information about the Execution Engine.",
			"properties": {
				"engineKindName": {
					"type": "string",
					"description": "The engine kind name."
				},
				"engineName": {
					"type": "string",
					"description": "The engine name."
				}
			}
		},
		"Message": {
			"type": "object",
			"description": "A structured message object. Used to return errors from requests.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for the message."
				},
				"format": {
					"type": "string",
					"description": "A format string for the message. Embedded variables have the form '{name}'.\nIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes."
				},
				"variables": {
					"type": "object",
					"description": "An object used as a dictionary for looking up the variables in the format string.",
					"additionalProperties": {
						"type": "string",
						"description": "Values must be strings."
					}
				},
				"sendTelemetry": {
					"type": "boolean",
					"description": "If true send to telemetry."
				},
				"showUser": {
					"type": "boolean",
					"description": "If true show user."
				},
				"url": {
					"type": "string",
					"description": "An optional url where additional information about this message can be found."
				},
				"urlLabel": {
					"type": "string",
					"description": "An optional label that is presented to the user as the UI for opening the url."
				}
			},
			"required": [ "id", "format" ]
		}

	}
}
